/* 
 * 8-high FONT FOR RENDERING TO THE LED SCREEN.
 * 8 pixels-per-byte, variable width.
 *
 * by Louis Roy based on 7x5 by David Soyez, 2013
 * further adapted by Gaurav Manek, 2014
 */

#ifndef __FONT8X4_H
#define __FONT8X4_H

#define FONT_8X4_HEIGHT  8

byte FONT_8X4 [] = {
  0b00000000,  //  
  0b11111011, 0b00000000, 0b00000000,  // !
  0b11000000, 0b00000000, 0b11000000,  // "
  0b01010000, 0b11111000, 0b01010000, 0b11111000,  // #
  0b00000000, 0b00000000, 0b00000000, 0b00000000,  // $
  0b11001000, 0b11010000, 0b00100000, 0b01011000,  // %
  0b01010000, 0b10101000, 0b10011000, 0b01011000,  // &
  0b11000000,  // '
  0b01110000, 0b10001000, 0b00000000,  // (
  0b10001000, 0b01110000, 0b00000000,  // )
  0b10100000, 0b01000000, 0b10100000, 0b00000000,  // *
  0b00100000, 0b00100000, 0b11111000, 0b00100000,  // +
  0b00001000, 0b00010000,  // ,
  0b00100000, 0b00100000, 0b00100000, 0b00000000,  // -
  0b00001000, 0b00000000,  // .
  0b00001000, 0b00110000, 0b01100000, 0b10000000,  // /
  0b01111110, 0b10000001, 0b01111110, 0b00000000,  // 0
  0b01000001, 0b11111111, 0b00000001,  // 1
  0b01000111, 0b10001001, 0b01110001, 0b00000000,  // 2
  0b10001001, 0b10001001, 0b11111111, 0b00000000,  // 3
  0b11110000, 0b00010000, 0b11111111, 0b00000000,  // 4
  0b11110001, 0b10010001, 0b10011111, 0b00000000,  // 5
  0b11111111, 0b10010001, 0b10011111, 0b00000000,  // 6
  0b10001111, 0b10010000, 0b11100000, 0b00000000,  // 7
  0b11111111, 0b10010001, 0b11111111, 0b00000000,  // 8
  0b11110001, 0b10010001, 0b11111111, 0b00000000,  // 9
  0b00100100,  // :
  0b00001000, 0b01010000,  // ;
  0b00100000, 0b01010000, 0b10001000, 0b00000000,  // <
  0b01010000, 0b01010000, 0b01010000, 0b00000000,  // =
  0b10001000, 0b01010000, 0b00100000, 0b00000000,  // >
  0b01000000, 0b10000000, 0b10011000, 0b01100000,  // ?
  0b01110000, 0b10000000, 0b10110000, 0b10101000,  // @
  0b11111111, 0b10010000, 0b10010000, 0b11111111,  // A
  0b11111111, 0b10010001, 0b10010001, 0b11101111,  // B
  0b11111111, 0b10000001, 0b10000001, 0b11000011,  // C
  0b11111111, 0b10000001, 0b10000001, 0b01111110,  // D
  0b11111111, 0b10010001, 0b10010001, 0b10000001,  // E
  0b11111111, 0b10010000, 0b10010000, 0b10000000,  // F
  0b11111111, 0b10000001, 0b10010001, 0b10011111,  // G
  0b11111111, 0b00010000, 0b00010000, 0b11111111,  // H
  0b10000001, 0b11111111, 0b10000001,  // I
  0b10000011, 0b10000001, 0b10000001, 0b11111111,  // J
  0b11111111, 0b00010000, 0b00101000, 0b11000111,  // K
  0b11111111, 0b00000001, 0b00000001, 0b00000001,  // L
  0b11111111, 0b01100000, 0b01100000, 0b11111111,  // M
  0b11111111, 0b00110000, 0b00001100, 0b11111111,  // N
  0b11111111, 0b10000001, 0b10000001, 0b11111111,  // O
  0b11111111, 0b10010000, 0b10010000, 0b11110000,  // P
  0b11111111, 0b10000101, 0b10000011, 0b11111111,  // Q
  0b11111111, 0b10010000, 0b10011000, 0b11110111,  // R
  0b11110001, 0b10010001, 0b10010001, 0b10011111,  // S
  0b10000000, 0b11111111, 0b10000000, 0b00000000,  // T
  0b11111111, 0b00000001, 0b00000001, 0b11111111,  // U
  0b11111100, 0b00000111, 0b00000111, 0b11111100,  // V
  0b11111110, 0b00001111, 0b00000111, 0b11111110,  // W
  0b11100111, 0b00111100, 0b00111100, 0b11100111,  // X
  0b11100000, 0b00011111, 0b11100000, 0b00000000,  // Y
  0b10000011, 0b10001101, 0b10110001, 0b11000001,  // Z
  0b11111000, 0b10001000, 0b00000000,  // [
  0b10000000, 0b01100000, 0b00110000, 0b00001000,  // \
  0b10001000, 0b11111000, 0b00000000,  // ]
  0b01000000, 0b10000000, 0b01000000, 0b00000000,  // ^
  0b00001000, 0b00001000, 0b00001000, 0b00000000, 0b00000000,  // _
};

int FONT_8X4_END [] = {
     1,   4,   7,  11,  15,  19,  23,  24,
    27,  30,  34,  38,  40,  44,  46,  50,
    54,  57,  61,  65,  69,  73,  77,  81,
    85,  89,  90,  92,  96, 100, 104, 108,
   112, 116, 120, 124, 128, 132, 136, 140,
   144, 147, 151, 155, 159, 163, 167, 171,
   175, 179, 183, 187, 191, 195, 199, 203,
   207, 211, 215, 218, 222, 225, 229, 234
};

#endif  // __FONT8X4_H